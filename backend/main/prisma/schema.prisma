generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String             @id @default(cuid())
  loginId         String             @unique
  nickname        String
  password        String
  birth           DateTime
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt
  refreshToken    String?
  refreshTokenExp DateTime?
  lastLogin       DateTime?
  interest        String
  parentFeedbacks ParentFeedbacks[]
  problems        Problems[]
  progresses      Progresses[]
  solveHistories  SolveHistories[]
  testResults     TestResults[]
  achievements    UserAchievements[]

  @@map("users")
}

model TestResults {
  id        String   @id @default(cuid())
  userId    String
  result    Int
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])

  @@map("test_results")
}

model ParentFeedbacks {
  id        String   @id @default(cuid())
  userId    String
  feedback  String
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])

  @@map("parent_feedback")
}

model Progresses {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  correct   Int
  total     Int
  user      Users    @relation(fields: [userId], references: [id])

  @@map("progresses")
}

model UserAchievements {
  id            String       @id @default(cuid())
  userId        String
  achievementId String
  createdAt     DateTime     @default(now())
  achievement   Achievements @relation(fields: [achievementId], references: [id])
  user          Users        @relation(fields: [userId], references: [id])

  @@map("user_achievements")
}

model Achievements {
  id          String             @id @default(cuid())
  title       String
  description String
  level       Int?
  createdAt   DateTime           @default(now())
  users       UserAchievements[]

  @@map("achievements")
}

model Problems {
  id             String           @id
  userId         String
  question       String
  answer         String
  imagePath      String
  wholeText      String
  createdAt      DateTime         @default(now())
  user           Users            @relation(fields: [userId], references: [id])
  solveHistories SolveHistories[]

  @@map("problems")
}

model SolveHistories {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  isCorrect Boolean
  feedback  String
  voicePath String
  createdAt DateTime @default(now())
  problem   Problems @relation(fields: [problemId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])

  @@map("solve_histories")
}
