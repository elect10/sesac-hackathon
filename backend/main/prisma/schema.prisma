// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String    @id @default(cuid())
  loginId         String    @unique
  nickname        String
  password        String
  birth           DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?  @updatedAt
  refreshToken    String?
  refreshTokenExp DateTime?
  lastLogin       DateTime?
  interest        String

  // Relationships
  testResults     TestResults[]
  feedbacks       Feedbacks[]
  progresses      Progresses[]
  achievements    UserAchievements[]
  problems        Problems[]

  @@map("users")
}

model TestResults {
  id        String    @id @default(cuid())
  userId    String
  result    Int
  createdAt DateTime  @default(now())

  // Relationships
  user      Users      @relation(fields: [userId], references: [id])

  @@map("test_results")
}

enum TestType {
  Listening
  Speaking
}

model Feedbacks {
  id          String   @id @default(cuid())
  userId      String
  content     String
  createdAt   DateTime @default(now())

  // Relationships
  user        Users    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Progresses {
  id        String   @id @default(cuid())
  type      TestType
  userId    String
  progress  Int
  createdAt DateTime @default(now())

  // Relationships
  user      Users    @relation(fields: [userId], references: [id])

  @@map("progresses")
}

model UserAchievements {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  createdAt     DateTime @default(now())

  // Relationships
  user          Users      @relation(fields: [userId], references: [id])
  achievement   Achievements @relation(fields: [achievementId], references: [id])

  @@map("user_achievements")
}

model Achievements {
  id          String   @id @default(cuid())
  title       String
  description String
  level       Int?
  createdAt   DateTime @default(now())

  // Relationships
  users       UserAchievements[]

  @@map("achievements")
}

model Problems {
  id          String   @id
  user        Users    @relation(fields: [userId], references: [id])
  userId      String   
  question     String
  answer      String
  isCorrect   Boolean?
  imagePath   String
  voicePath   String?
  wholeText   String
  feedback    String?
  createdAt   DateTime @default(now())
}
